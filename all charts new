# packages:
import pandas as pd
from pandas_datareader import data, wb
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import quandl
import datetime as dt
import mpl_finance

quandl.ApiConfig.api_key = "h6GWzVj2-ewrPeUZxZnn"

# user input for start and end date of the stock data
start = input('Please enter the start date for the stock data in the format yyyy.mm.dd: ')
end = input('Please enter the end date for the stock data in the format yyyy.mm.dd: ')

# user input for the stock selection
stock1 = input('Please enter the ticker symbol of a stock (e.g. "GOOG" for Google): ')
stock2 = input(('Please enter the ticker symbol of a seccond stock (e.g. "FB" for Facebook): '))
stocks = [stock1, stock2]

# download the stock data from quandl and assign it to variables
stock_data1, stock_data2 = (quandl.get('WIKI/' + s, start_date = start, end_date = end) for s in stocks)

print('Basic data for', stock1)
print(stock_data1.head())

print('Basic data for', stock2)
print(stock_data2.head())


# Plot chart adj close single
%matplotlib inline
# Control the default size of figures in this Jupyter notebook
%pylab inline
pylab.rcParams['figure.figsize'] = (15, 9)   # Change the size of plots

title_stock1 = 'Adjusted close price for ' + stock1 + ' from ' + start + ' to ' + end
title_stock2 = 'Adjusted close price for ' + stock2 + ' from ' + start + ' to ' + end
 
stock_data1.reset_index().plot(y='Adj. Close', x='Date', figsize=(13.5,9), title=title_stock1, color='blue') # Plot the adjusted closing price of stock1
stock_data2.reset_index().plot(y='Adj. Close', x='Date', figsize=(13.5,9), title=title_stock2, color='red') # Plot the adjusted closing price of stock2

# Below I create a DataFrame consisting of the adjusted closing price of these stocks, first by making a list of these objects and using the join method
stocks_adjclose = pd.DataFrame({stock1: stock_data1["Adj. Close"],
                      stock2: stock_data2["Adj. Close"]})
 
title_merged_adjcloses = 'Adjusted close price for ' + stock1 + ' and ' + stock2 + ' from ' + start + ' to ' + end
    
stocks_adjclose.head()

stocks_adjclose.plot(grid = True, title=title_merged_adjcloses)

# df.apply(arg) will apply the function arg to each column in df, and return a DataFrame with the result
# Recall that lambda x is an anonymous function accepting parameter x; in this case, x will be a pandas Series object
stock_return = stocks_adjclose.apply(lambda x: x / x[0])
stock_return.head()

title_returns = 'Returns for ' + stock1 + ' and ' + stock2 + ' from ' + start + ' to ' + end

stock_return.plot(grid = True, title=title_returns).axhline(y = 1, color = "black", lw = 2)


# plot a candle stick diagram:
from matplotlib.dates import DateFormatter, WeekdayLocator,\
    DayLocator, MONDAY
from mpl_finance import candlestick_ohlc
 
def pandas_candlestick_ohlc(dat, stick = "day", adj = False, otherseries = None):
    """
    :param dat: pandas DataFrame object with datetime64 index, and float columns "Open", "High", "Low", and "Close", likely created via DataReader from "yahoo"
    :param stick: A string or number indicating the period of time covered by a single candlestick. Valid string inputs include "day", "week", "month", and "year", ("day" default), and any numeric input indicates the number of trading days included in a period
    :param adj: A boolean indicating whether to use adjusted prices
    :param otherseries: An iterable that will be coerced into a list, containing the columns of dat that hold other series to be plotted as lines
 
    This will show a Japanese candlestick plot for stock data stored in dat, also plotting other series if passed.
    """
    mondays = WeekdayLocator(MONDAY)        # major ticks on the mondays
    alldays = DayLocator()              # minor ticks on the days
    dayFormatter = DateFormatter('%d')      # e.g., 12
 
    # Create a new DataFrame which includes OHLC data for each period specified by stick input
    fields = ["Open", "High", "Low", "Close"]
    if adj:
        fields = ["Adj. " + s for s in fields]
    transdat = dat.loc[:,fields]
    transdat.columns = pd.Index(["Open", "High", "Low", "Close"])
    if (type(stick) == str):
        if stick == "day":
            plotdat = transdat
            stick = 1 # Used for plotting
        elif stick in ["week", "month", "year"]:
            if stick == "week":
                transdat["week"] = pd.to_datetime(transdat.index).map(lambda x: x.isocalendar()[1]) # Identify weeks
            elif stick == "month":
                transdat["month"] = pd.to_datetime(transdat.index).map(lambda x: x.month) # Identify months
            transdat["year"] = pd.to_datetime(transdat.index).map(lambda x: x.isocalendar()[0]) # Identify years
            grouped = transdat.groupby(list(set(["year",stick]))) # Group by year and other appropriate variable
            plotdat = pd.DataFrame({"Open": [], "High": [], "Low": [], "Close": []}) # Create empty data frame containing what will be plotted
            for name, group in grouped:
                plotdat = plotdat.append(pd.DataFrame({"Open": group.iloc[0,0],
                                            "High": max(group.High),
                                            "Low": min(group.Low),
                                            "Close": group.iloc[-1,3]},
                                           index = [group.index[0]]))
            if stick == "week": stick = 5
            elif stick == "month": stick = 30
            elif stick == "year": stick = 365
 
    elif (type(stick) == int and stick >= 1):
        transdat["stick"] = [np.floor(i / stick) for i in range(len(transdat.index))]
        grouped = transdat.groupby("stick")
        plotdat = pd.DataFrame({"Open": [], "High": [], "Low": [], "Close": []}) # Create empty data frame containing what will be plotted
        for name, group in grouped:
            plotdat = plotdat.append(pd.DataFrame({"Open": group.iloc[0,0],
                                        "High": max(group.High),
                                        "Low": min(group.Low),
                                        "Close": group.iloc[-1,3]},
                                       index = [group.index[0]]))
 
    else:
        raise ValueError('Valid inputs to argument "stick" include the strings "day", "week", "month", "year", or a positive integer')
 
 
    # Set plot parameters, including the axis object ax used for plotting
    fig, ax = plt.subplots()
    fig.subplots_adjust(bottom=0.2)
    if plotdat.index[-1] - plotdat.index[0] < pd.Timedelta('730 days'):
        weekFormatter = DateFormatter('%b %d')  # e.g., Jan 12
        ax.xaxis.set_major_locator(mondays)
        ax.xaxis.set_minor_locator(alldays)
    else:
        weekFormatter = DateFormatter('%b %d, %Y')
    ax.xaxis.set_major_formatter(weekFormatter)
 
    ax.grid(True)
 
    # Create the candlestick chart
    candlestick_ohlc(ax, list(zip(list(date2num(plotdat.index.tolist())), plotdat["Open"].tolist(), plotdat["High"].tolist(),
                      plotdat["Low"].tolist(), plotdat["Close"].tolist())),
                      colorup = "black", colordown = "red", width = stick * .4)
 
    # Plot other series (such as moving averages) as lines
    if otherseries != None:
        if type(otherseries) != list:
            otherseries = [otherseries]
        dat.loc[:,otherseries].plot(ax = ax, lw = 1.3, grid = True)
 
    ax.xaxis_date()
    ax.autoscale_view()
    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')
 
    plt.ylabel('Price')
    plt.show()
 
pandas_candlestick_ohlc(stock_data1, adj=True, stick="month")
pandas_candlestick_ohlc(stock_data1, adj=True, stick="day")
pandas_candlestick_ohlc(stock_data2, adj=True, stick="month")
pandas_candlestick_ohlc(stock_data2, adj=True, stick="day")


# Plot a 20 day moving average for stock1
stock_data1['20d'] = np.round(stock_data1['Adj. Close'].rolling(window = 20, center = False).mean(), 2)
pandas_candlestick_ohlc(stock_data1.loc[start:end,:], otherseries = '20d', adj=True)

# Plot a 20 day moving average for stock2
stock_data2['20d'] = np.round(stock_data2['Adj. Close'].rolling(window = 20, center = False).mean(), 2)
pandas_candlestick_ohlc(stock_data2.loc[start:end,:], otherseries = '20d', adj=True)
